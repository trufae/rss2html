#!/bin/sh
# This script was automatically generated by ACR v0.5
# @author: pancake <pancake@phreaker.net>
# @url: http://news.nopcode.org/pancake/acr.html

do_remove() {
if [ "${ACR_RMFILES}" ]; then
  printf "cleaning temporally files... "
  rm -f ${ACR_RMFILES}
  echo "done"
fi
}
control_c() {
  printf "\n\n^C control-c : script execution interrupted.\n"
  do_remove
  exit 1
}
trap control_c 2
DEBUG=0
HAVE_LIB_CURL=1
split_host() {
while : ; do
ENVWORDS="${ENVWORDS} $1_CPU $1_OS"
STR=`eval "echo \$$1"`
SPLIT_CPU="`echo "$STR" | cut -d - -f 1`"
SPLIT_OS="`echo "$STR" | cut -d - -f 3`"
eval "$1_CPU=\"$SPLIT_CPU\""
eval "$1_OS=\"$SPLIT_OS\""
shift
[ -z "$1" ] && break
done
}

VPATH=`dirname ${0}`
if [ "${VPATH}" = "." ]; then 
	WODIS=current
else
	if [ "${VPATH}" = "${PWD}" ]; then
		VPATH=.
		WODIS=current
	else
		WODIS=crosspath
		CURDIR=$PWD
		cd $VPATH
		VPATH="${PWD}/"
		cd $CURDIR
	fi
fi

guess_os() {
if [ -e "${VPATH}/config.guess" ]; then
	sh ${VPATH}/config.guess
	return
fi
CPU="`uname -m|sed -e 's, ,,g'`"
OS="`uname -s|awk '{print(tolower($0))}'`"
GNU="`uname --help 2>&1 | grep gnu`"
[ "${GNU}" ] && OS="${OS}-gnu"
[ "${CPU}" = ppc ] && CPU="powerpc"
echo "${CPU}-unknown-${OS}"
}

SEARCHPATH="/usr /usr/local /usr/pkg /sw"

: ${PREFIX:=/usr/local}
CROSSBUILD=0
BUILD=`guess_os`
HOST="${BUILD}"
TARGET="${HOST}"
SYSCONFDIR=""

create_environ() {
: ${EPREFIX:=${PREFIX}}
: ${SPREFIX:=${PREFIX}}
: ${BINDIR:=${SPREFIX}/bin}
: ${SBINDIR:=${PREFIX}/sbin}
: ${SYSCONFDIR:=${SPREFIX}/etc}
: ${LIBDIR:=${SPREFIX}/lib}
: ${LIBEXECDIR:=${SPREFIX}/libexec}
: ${DATADIR:=${SPREFIX}/share}
: ${INCLUDEDIR:=${SPREFIX}/include}
: ${INFODIR:=${SPREFIX}/info}
: ${MANDIR:=${SPREFIX}/man}
: ${LOCALSTATEDIR:=${SPREFIX}/var}
: ${INSTALL:=/usr/bin/install}
: ${INSTALL_DIR:=${INSTALL} -d}
: ${INSTALL_DATA:=${INSTALL} -m 644}
: ${INSTALL_SCRIPT:=${INSTALL}}
: ${INSTALL_PROGRAM:=${INSTALL} -s}
: ${INSTALL_MAN:=${INSTALL} -m 444}
: ${INSTALL_LIB:=${INSTALL} -c}
 PKGNAME='rss2html' ; CONTACT_MAIL="pancake@phreaker.net" ; CONTACT_NAME="pancake" ; CONTACT="pancake <pancake@phreaker.net>" ; VERSION='0.8.2' ;
}
                
show_usage() {
cat <<EOF2
'configure' configures rss2html-0.8.2 to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
  -V, --version           display version information and exit
  -r, --report            show what libs/programs require to work

Installation directories:
  --prefix=PREFIX        install arch-independent files in PREFIX [/usr/local]
  --exec-prefix=EPREFIX  install arch-dependent files in EPREFIX [PREFIX]
  --sandbox=SPREFIX      sandbox prefix directory: SPREFIX [PREFIX]

Fine tuning of the installation directories:
  --bindir=DIR           user executables [EPREFIX/bin]
  --sbindir=DIR          system admin executables [EPREFIX/sbin]
  --libexecdir=DIR       program executables [EPREFIX/libexec]
  --datadir=DIR          read-only architecture-independent data [PREFIX/share]
  --sysconfdir=DIR       read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR   modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR    modifiable single-machine data [PREFIX/var]
  --libdir=DIR           object code libraries [EPREFIX/lib]
  --includedir=DIR       C header files [PREFIX/include]
  --infodir=DIR          info documentation [PREFIX/info]
  --mandir=DIR           man documentation [PREFIX/man]

System types:
  --build=BUILD          configure for building on BUILD [guessed]
  --host=HOST            cross-compile to build programs to run on HOST [BUILD]
  --target=TARGET        configure for building compilers for TARGET [HOST]
EOF2

printf "\nOptional Features:
  --enable-debug         compiles rss2html with extra debugging. 
  --without-curl         Build rss2html without curl dependency \n"
printf "\nSome influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  CPPFLAGS    C/C++ preprocessor flags, e.g. -I<include dir> if you have
              headers in a nonstandard directory <include dir>
  CPP         C preprocessor\n"
printf "\nReport bugs to: pancake <pancake@phreaker.net>"
echo ""
exit 0
}

take_environ() {
: ${SH:=/bin/sh}
: ${CPP:=cpp}
: ${CC:=gcc}
: ${PREFIX:=/usr/local/}
}

show_version() {
echo "rss2html-0.8.2 configuration script.
Automatically generated by ACR 0.5.

The 'Free Software Foundation' message is only for autodetection.
Originally written by pancake <pancake@phreaker.net>."
exit 0
}

parse_options() {
flag=`echo $1| cut -d = -f 1`
value=`echo $1| awk -F = '{print $2}'`
flag2=`echo $flag|cut -f2- -d -| sed -e 's,-,_,g' -e 's,^_,,g'|tr '[a-z]' '[A-Z]'`

case $flag in
"-h"|"--help"|"--hel"|"--h"|"--he"|"-help")
	show_usage ; ;;
"-V"|"-version"|"--version")
	show_version ; ;;
"-r"|"--r"|"--report")
echo "PKGNAME:   rss2html"
echo "VERSION:   0.8.2"
echo "LANGS:     c"
echo "OPTIONAL:  libcurl"
echo "FLAGS:     --enable-debug --without-curl"
	exit 0
	;;
"--cache-file") 
	# ignored: acr have no cache
	;;
"--build")
	BUILD="$value"; ;;
"--host")
	CROSSBUILD=1
	HOST="$value"; ;;
"--target")
	TARGET="$value"; ;;
"--prefix")
	PREFIX="$value"; ;;
"--exec-prefix")
	EPREFIX="$value"; ;;
"--sandbox"|"--sprefix")
	SPREFIX="$value"; ;;
"--bindir")
	BINDIR="$value"; ;;
"--sbindir")
	SBINDIR="$value"; ;;
"--libexecdir")
	LIBEXECDIR="$value"; ;;
"--datadir")
	DATADIR="$value"; ;;
"--sysconfdir")
	SYSCONFDIR="$value"; ;;
"--sharedstatedir")
	SHAREDSTATEDIR="$value"; ;;
"--localstatedir")
	LOCALSTATEDIR="$value"; ;;
"--libdir")
	LIBDIR="$value"; ;;
"--includedir")
	INCLUDEDIR="$value"; ;;
"--infodir")
	INFODIR="$value"; ;;
"--mandir")
	MANDIR="$value"; ;;

"--enable-debug") DEBUG="1"; ;;
"--without-curl") HAVE_LIB_CURL="0"; ;;
*) if [ "$value" ]; then eval "`echo $flag2=$value`" ; 
else echo ; echo "WARNING: Unknown flag '$flag'." >/dev/stderr; echo ; fi ;;
esac
}

# MAIN #
take_environ

while : ; do
[ -z "$1" ] && break
parse_options $1
shift
done

ENVWORDS="MANDIR INFODIR LIBDIR INCLUDEDIR LOCALSTATEDIR SYSCONFDIR DATADIR LIBEXECDIR SBINDIR BINDIR EPREFIX PREFIX SPREFIX TARGET HOST BUILD INSTALL INSTALL_LIB INSTALL_MAN INSTALL_PROGRAM INSTALL_DIR INSTALL_SCRIPT INSTALL_DATA HOST_OS HOST_CPU BUILD_OS BUILD_CPU TARGET_OS TARGET_CPU PKGNAME VPATH CONTACT CONTACT_NAME CONTACT_MAIL VERSION CC CFLAGS LDFLAGS HAVE_LANG_C HAVE_TIME_H HAVE_NETINET_IN_H DEBUG DEBUG_CFLAGS HAVE_LIB_CURL HAVE_CURL CURL"

create_environ

echo "checking build system type... ${BUILD}"
echo "checking host system type... ${HOST}"
echo "checking target system type... ${TARGET}"
[ "${CROSSBUILD}" = 1 ] && echo "using crosscompilation mode."

split_host BUILD HOST TARGET
echo "checking for working directories... ${WODIS}"
echo "using prefix '${PREFIX}'"
ACR_RMFILES=" test.c a.out a.exe"


: 
COMPILER=CC
printf "checking for c compiler... "
HAVE_LANG_C=1
if [ "${CROSSBUILD}" = 1 ]; then
 (command -v ${HOST}-${CC} >/dev/null 2>&1)
 if [ $? = 0 ]; then CC="${HOST}-${CC}"; fi
fi
echo "main(){}" > test.c
 (exec ${CC} ${CFLAGS} ${LDFLAGS} test.c >/dev/null 2>&1)
if [ $? = 0 ]; then echo ${CC}; else
 echo no ; HAVE_LANG_C=0
do_remove
echo "ERROR: ${CC} cannot create executables" > /dev/stderr ;
exit 1 ; fi
check_include() {
VAR=$1
INC=$2
_REQUIRED=$3
printf "checking for $2... "
echo > test.c
echo "#include <${INC}>" >>test.c
echo "main(){}" >>test.c
eval \$${COMPILER} ${CFLAGS} test.c >/dev/null 2>&1
if [ $? = 0 ]; then
	eval ${VAR}=1
	echo yes
else
	eval ${VAR}=0
	echo no ; fi }
check_include HAVE_TIME_H time.h 0

check_include HAVE_NETINET_IN_H netinet/in.h 0

export DEBUG_CFLAGS=""
if [ "$DEBUG" = "1" ]; then export DEBUG_CFLAGS="" ; fi
if [ "$HAVE_LIB_CURL" = "1" ]; then
printf "checking for curl-config... "
if [ -x "${CURL}" ]; then
FIND=${CURL}
else
FIND=""
for A in `echo ${PATH} | sed -e 's,:, ,g'`; do
if [ -x "${A}/curl-config" ]; then
        FIND="${A}/curl-config"
        break;
fi
done
fi
if [ -n "${FIND}" ]; then 
 echo ${FIND}; 
 HAVE_CURL=1
 CURL=${FIND}
else
 HAVE_CURL=0
 CURL=curl-config
 echo no ; fi
if [ "$HAVE_CURL" = "1" ]; then
check_library() {
VAR=$1
_CHKLIB_NAME=$2
_REQUIRED=$3
printf "checking for lib${_CHKLIB_NAME} ... "
echo "main(){ }" > test.c
eval \$${COMPILER} ${CFLAGS} ${LDFLAGS} -lcurl  test.c >/dev/null 2>&1
if [ $? = 0 ]; then
	HAVE_LIB_CURL=1
	echo yes
else
	HAVE_LIB_CURL=0
	echo no ; fi }
check_library HAVE_LIB_CURL curl 0
fi; fi
SEDFLAGS=""
for A in ${ENVWORDS} ; do
	[ "${A}" = VPATH ] && continue
	[ "${A}" = srcdir ] && continue 
	eval "VAR=\$${A}"
	VAR="`echo ${VAR} | sed -e 's/\,/\\\,/g'`"
	SEDFLAGS="${SEDFLAGS} -e 's,@${A}@,${VAR},g;'"
done
for A in . src  ; do # SUBDIRS
 if [ -f "${VPATH}/${A}.acr" ]; then
  SD_TARGET=${A}
 else
  if [ -d "${VPATH}/${A}" ]; then
   SD_TARGET=${A}/Makefile
   mkdir -p ${A}
  else
   echo "ERROR: Cannot find ${VPATH}/${SD_TARGET}.acr" > /dev/stderr
   exit 1
  fi
 fi
 echo "creating ${SD_TARGET}"
mkdir -p $(echo ${A} | sed -e "s,/`basename ${A}`$,,g")
 cat ${VPATH}/${SD_TARGET}.acr | \
eval sed -e "s,@VPATH@,${VPATH}/${A},g" ${SEDFLAGS} > ${SD_TARGET}.tmp

for A in ${ENVWORDS}; do
VALUE=`eval echo "$"${A}`
if [ "$VALUE" = "0" ]; then
MARK="##${A}##"
  mv ${SD_TARGET}.tmp ${SD_TARGET}.tmp2
  cat ${SD_TARGET}.tmp2 | awk -v MARK=$MARK 'BEGIN{a=0;}{if($1==MARK){ a=!a }else{if(!a)print;}}' > ${SD_TARGET}.tmp
 fi
done
mv ${SD_TARGET}.tmp ${SD_TARGET} && rm -f ${SD_TARGET}.tmp2
if [ $? = 1 ]; then echo Cannot write target file ; control_c ; fi
done

do_remove
echo
echo "Final report:"
for A in  HAVE_LIB_CURL DEBUG PREFIX ; do # REPORT
eval VAL="\$${A}"
[ -z "${VAL}" ] && VAL="(null)"
echo " - ${A} = ${VAL}"
done
